import os
os.environ["CUDA_VISIBLE_DEVICES"]="-1" #for GPU usage

import tensorflow as tf
import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import torchvision.transforms as transforms
from PIL import Image

from keras.preprocessing.image import ImageDataGenerator # inport api
datagen = ImageDataGenerator(zca_whitening=True)


data_dir = "/home/images_training_rev1/"
label_dir = "/home/images_training_label"

label=pd.read_csv(label_dir)
index1=label['GalaxyID']


label_list=label['class']
label_list=list(label_list)
image_list=[]

for i in range(len(index1)):
    image_list.append(data_dir+str(index1[i])+'.jpg')


temp = np.array([image_list, label_list])
temp = temp.transpose()


    
image_list = list(temp[:, 0])
label_list = list(temp[:, 1])
label_list = [round(float(i)) for i in label_list] 

image_c, image_id, label_trans = [],[],[]
idd = 0
######################################################
#0 smooth : 8437
# 1 1betwe:8069
# 2 cigar:579  * 12 = 6948
# 3 edge: 3903  * 2 = 7806
# 4 spiral:7806
#####################################################
smooth_num = 16000
smooth_label = 0

between_num = 1778
between_label = 1

cigar_num = 0
cigar_label = 0

edge_num = 0
edge_label = 0

spiral_num = 0
spiral_label = 0

smooth_num_tmp = between_num_tmp = cigar_num_tmp = edge_num_tmp = spiral_num_tmp = 0
for i in range(len(image_list)):
    if label_list[i] == 0 and smooth_num_tmp  <smooth_num:
        image = Image.open(image_list[i])
#         image = image.convert('L')
        img_width = random.randint(170,240)
        CenterCrop = transforms.CenterCrop((img_width,img_width))
        image = CenterCrop(image)
        image = image.resize((80,80))
        image = image.resize((64,64))
        
        image_c.append(np.array(image))
        image_id.append(idd)
        idd += 1
#         label_trans.append(label_list[i])
        label_trans.append(smooth_label)
        smooth_num_tmp += 1
        
        image = image.transpose(Image.ROTATE_180)
        image_c.append(np.array(image))
        image_id.append(idd)
        idd += 1
#         label_trans.append(label_list[i])
        label_trans.append(smooth_label)
        smooth_num_tmp += 1
     
    
    if label_list[i] == 1 and between_num_tmp <between_num:
        image = Image.open(image_list[i])
#         image = image.convert('L')
        img_width = random.randint(170,240)
        CenterCrop = transforms.CenterCrop((img_width,img_width))
        image = CenterCrop(image)
        image = image.resize((80,80))
        image = image.resize((64,64))
        
        image_c.append(np.array(image))
        image_id.append(idd)
        idd += 1
#         label_trans.append(label_list[i])
        label_trans.append(between_label)
        between_num_tmp += 1
    
     
        
print(smooth_num_tmp , between_num_tmp , cigar_num_tmp , edge_num_tmp , spiral_num_tmp)

dictory = dict(zip(image_id, label_trans))     
image_c = np.array(image_c)
image_c = image_c/255
image_c = image_c.reshape(len(label_trans),64,64,3)
    
          
print(np.array(image_c).shape)


from pyod.models.knn import KNN
def pyodknn(image_c,neighbours):
    
    X_train = image_c[:12000]
    X_test = image_c[12000:17000]
    X_train = X_train.reshape(12000,64*64*3)
    X_test = X_test.reshape(5000,64*64*3)
    clf_name = 'kNN'
    clf = KNN(contamination=0.1, n_neighbors=neighbours, method='largest', radius=1.0, algorithm='auto', leaf_size=30, 
              metric='minkowski', p=2, metric_params=None, n_jobs=1)
    clf.fit(X_train) 



    y_train_pred = clf.labels_  
    y_train_scores = clf.decision_scores_  

    
    y_test_pred = clf.predict(X_test)  
    y_test_scores = clf.decision_function(X_test)  
    return y_test_pred,y_test_scores
    print("++++++++++++++++++++")
def PlotAuc(y_scores,label44odd):
    import matplotlib.pyplot as plt
    from sklearn import svm
    from sklearn.metrics import roc_curve, auc  

    # Compute ROC curve and ROC area for each class
    fpr, tpr, threshold = roc_curve(label44odd, y_scores) 
    roc_auc = auc(fpr, tpr)
    
    lw = 2
    plt.figure(figsize=(8, 5))
    plt.plot(fpr, tpr, color='darkorange',label='assumed ROC curve (area = %0.5f)' % roc_auc)
    #plt.plot(lw=lw, label='ROC curve (area = %0.5f)' % roc_auc) 

#     plt.plot(fpr_ptrue, tpr_ptrue, color='red',label='truefraction ROC curve (area = %0.5f)' % roc_auc_ptrue)
    #plt.plot(lw=lw,label='ROC curve (area = %0.5f)' % roc_auc_ptrue)

    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver operating characteristic example')
    plt.legend(loc="lower right")
    plt.show()
for neighbour in range(8,150,4):
    print("neighbours",neighbour)
    y_test_pred,y_test_scores = pyodknn(image_c,neighbour)
    maxscore, minscore = max(y_test_scores), min(y_test_scores)
    for i,score in enumerate(y_test_scores):
        y_test_scores[i] = score/maxscore
    numodd = 0
    label44odd = label_trans[12000:17000]
    for i in range(len(label44odd)):
        if y_test_pred[i] == label44odd[i]==1:
            numodd += 1
    print(numodd)
    PlotAuc(y_test_scores,label44odd)